Bootstrap: docker
# ベースとなるdocker image
From: nvidia/cuda:11.3.1-cudnn8-devel-ubuntu20.04

# 環境変数設定
%environment
    export LC_ALL=C
    export PYTHONPATH="/opt/mitsuba3/build/python:${PYTHONPATH}"
    export OPENCV_IO_ENABLE_OPENEXR=1
# 環境構築
%post
    export DEBIAN_FRONTEND=noninteractive

    # specify python version
    PYTHON_VERSION=3.8
    # add python repository
    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv f23c5a6cf475977595c89f51ba6932366a755776
    echo "deb http://ppa.launchpad.net/deadsnakes/ppa/ubuntu focal main " > /etc/apt/sources.list.d/python.list
    echo "deb-src http://ppa.launchpad.net/deadsnakes/ppa/ubuntu focal main" >> /etc/apt/sources.list.d/python.list
    apt-get update

    # remove default python
    apt-get purge --auto-remove python* libpython*
    
    # install specified python
    apt-get install -y python${PYTHON_VERSION}-dev
    
    # install pip
    apt-get install -y python3-pip
    ln -fs /usr/bin/python$PYTHON_VERSION /usr/bin/python
    ln -fs /usr/bin/python$PYTHON_VERSION /usr/bin/python3

    apt-get install -y curl x11-apps git g++ make unzip
    apt-get install -y cmake clang-format gdb zlib1g-dev libopenexr-dev libopencv-dev
    
    # required for matplotlib.show()
    apt-get install -y python$PYTHON_VERSION-tk

    # install python packages
    alias pip="/usr/bin/python$PYTHON_VERSION -m pip"
    pip install --upgrade --no-cache-dir pip
    pip install --no-cache-dir torch==1.12.1+cu113 torchvision==0.13.1+cu113 -f https://download.pytorch.org/whl/torch_stable.html
    pip install --no-cache-dir albumentations pudb imageio imageio-ffmpeg scikit-image lpips
    pip install --no-cache-dir pytorch-lightning==1.9.0
    pip install --no-cache-dir omegaconf streamlit torch-fidelity einops transformers
    pip install --no-cache-dir pynvrtc
    pip install --no-cache-dir matplotlib scikit-learn tqdm
    pip install --no-cache-dir Pillow tensorboard
    pip install --no-cache-dir pytorch-fid
    pip install --no-cache-dir -e git+https://github.com/CompVis/taming-transformers.git@master#egg=taming-transformers

    # build mitsuba3
    cd /opt
    git clone --branch v3.2.0 --recursive https://github.com/mitsuba-renderer/mitsuba3
    cd mitsuba3
    apt-get install -y clang-10 libc++-10-dev libc++abi-10-dev cmake ninja-build
    apt-get install -y libpng-dev libjpeg-dev
    apt-get install -y libpython3-dev python3-distutils
    export CC=clang-10 export CXX=clang++-10
    mkdir build
    cd build
    cmake -GNinja ..
    sed -i -e 's/        "scalar_rgb", "scalar_spectral", "cuda_ad_rgb", "llvm_ad_rgb"/        "scalar_rgb", "cuda_ad_rgb", "cuda_rgb"/g' mitsuba.conf
    ninja

    rm -rf /var/lib/apt/lists/*

# 起動時に行う処理
%runscript
    echo "Container was created $(date)"
    bash
